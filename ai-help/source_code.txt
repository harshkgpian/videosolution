===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\index.html ===== 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Script Generator</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- Renders Markdown -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Renders LaTeX -->
    <script>
        MathJax = {
          tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']]
          },
          svg: {
            fontCache: 'global'
          }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
</head>
<body>
    <div class="main-container">
        <header>
            <h1>AI Script Generator</h1>
            <p>Generate high-quality voiceover scripts from questions and solutions.</p>
        </header>

        <div class="settings-card">
            <h2>Configuration</h2>
            <div class="settings-grid">
                <div class="input-group">
                    <label for="api-key">Gemini API Key (Saved in browser)</label>
                    <input type="password" id="api-key" placeholder="Enter your API key once">
                </div>
                <div class="input-group">
                    <label for="model-select">Model</label>
                    <select id="model-select">
                        <option value="gemini-2.5-pro">Gemini 2.5 Pro (New)</option>
                        <option value="gemini-2.5-flash">Gemini 2.5 Flash (New)</option>
                        <option value="gemini-2.0-pro">Gemini 2.0 Pro</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="prompt-card">
            <h2>Your Content</h2>
            <!-- DEDICATED INPUTS INSTEAD OF TEMPLATE -->
            <div class="input-group">
                <label for="question-input">Question</label>
                <textarea id="question-input" rows="5" placeholder="Paste the question here..."></textarea>
            </div>
            <div class="input-group">
                <label for="solution-input">Solution</label>
                <textarea id="solution-input" rows="12" placeholder="Paste the detailed, step-by-step solution here..."></textarea>
            </div>
            
            <div class="file-input-wrapper">
                <label for="image-upload" class="file-upload-button">Upload Image (Optional)</label>
                <input type="file" id="image-upload" accept="image/*">
                <span id="file-name">No file chosen</span>
            </div>
            <div id="image-preview-container" class="hidden">
                <img id="image-preview" src="#" alt="Image Preview"/>
            </div>
            <button id="submit-btn">
                <span class="btn-text">Generate Script</span>
                <div class="loader hidden"></div>
            </button>
        </div>

        <div id="response-card" class="response-card hidden">
            <h2>Generated Script</h2>
            <div id="response-content"></div>
        </div>
    </div>

    <script src="./js/script.js" type="module"></script>
</body>
</html>
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\source_code.txt ===== 
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\index.html ===== 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Script Generator</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- Renders Markdown -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Renders LaTeX -->
    <script>
        MathJax = {
          tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']]
          },
          svg: {
            fontCache: 'global'
          }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
</head>
<body>
    <div class="main-container">
        <header>
            <h1>AI Script Generator</h1>
            <p>Generate high-quality voiceover scripts from questions and solutions.</p>
        </header>

        <div class="settings-card">
            <h2>Configuration</h2>
            <div class="settings-grid">
                <div class="input-group">
                    <label for="api-key">Gemini API Key (Saved in browser)</label>
                    <input type="password" id="api-key" placeholder="Enter your API key once">
                </div>
                <div class="input-group">
                    <label for="model-select">Model</label>
                    <select id="model-select">
                        <option value="gemini-2.5-pro">Gemini 2.5 Pro (New)</option>
                        <option value="gemini-2.5-flash">Gemini 2.5 Flash (New)</option>
                        <option value="gemini-2.0-pro">Gemini 2.0 Pro</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="prompt-card">
            <h2>Your Content</h2>
            <!-- DEDICATED INPUTS INSTEAD OF TEMPLATE -->
            <div class="input-group">
                <label for="question-input">Question</label>
                <textarea id="question-input" rows="5" placeholder="Paste the question here..."></textarea>
            </div>
            <div class="input-group">
                <label for="solution-input">Solution</label>
                <textarea id="solution-input" rows="12" placeholder="Paste the detailed, step-by-step solution here..."></textarea>
            </div>
            
            <div class="file-input-wrapper">
                <label for="image-upload" class="file-upload-button">Upload Image (Optional)</label>
                <input type="file" id="image-upload" accept="image/*">
                <span id="file-name">No file chosen</span>
            </div>
            <div id="image-preview-container" class="hidden">
                <img id="image-preview" src="#" alt="Image Preview"/>
            </div>
            <button id="submit-btn">
                <span class="btn-text">Generate Script</span>
                <div class="loader hidden"></div>
            </button>
        </div>

        <div id="response-card" class="response-card hidden">
            <h2>Generated Script</h2>
            <div id="response-content"></div>
        </div>
    </div>

    <script src="./js/script.js" type="module"></script>
</body>
</html>
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\source_code.txt ===== 
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\index.html ===== 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Script Generator</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" hre
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\style.css ===== 
:root {
    --bg-color: #f4f7f9;
    --card-bg-color: #ffffff;
    --primary-color: #4f46e5;
    --primary-hover-color: #4338ca;
    --text-color: #374151;
    --label-color: #6b7280;
    --border-color: #e5e7eb;
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    line-height: 1.6;
    padding: 2rem;
}

.main-container {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

header {
    text-align: center;
    margin-bottom: 1rem;
}

header h1 {
    font-weight: 700;
    font-size: 2.25rem;
    color: var(--text-color);
}

header p {
    color: var(--label-color);
    font-size: 1.1rem;
}

.settings-card, .prompt-card, .response-card {
    background-color: var(--card-bg-color);
    border-radius: 12px;
    padding: 2rem;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
}

h2 {
    font-size: 1.25rem;
    font-weight: 500;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--border-color);
}

.settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

label {
    font-weight: 500;
    color: var(--label-color);
}

input, select, textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-family: 'Inter', sans-serif;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
}

input:focus, select:focus, textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.2);
}

textarea {
    resize: vertical;
}

.file-input-wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
}

.file-upload-button {
    display: inline-block;
    background-color: #f9fafb;
    color: var(--text-color);
    border: 1px solid var(--border-color);
    padding: 0.6rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s;
}

.file-upload-button:hover {
    background-color: #f3f4f6;
}

#image-upload {
    display: none;
}

#file-name {
    color: var(--label-color);
    font-size: 0.9rem;
}

#image-preview-container {
    margin-top: 1rem;
}

#image-preview {
    max-width: 150px;
    max-height: 150px;
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

#submit-btn {
    width: 100%;
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    font-size: 1.1rem;
    font-weight: 500;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s;
    margin-top: 1.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
}

#submit-btn:hover {
    background-color: var(--primary-hover-color);
}

#response-content {
    white-space: pre-wrap;
    word-wrap: break-word;
    background-color: var(--bg-color);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    min-height: 100px;
}

.hidden {
    display: none !important;
}

/* Loader CSS */
.loader {
    width: 18px;
    height: 18px;
    border: 2px solid #FFF;
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
}

@keyframes rotation {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\js\gemini-service.js ===== 
// js/gemini-service.js

// --- Private Helper Functions ---

// Utility to convert a file to a Base64 string
function fileToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result.split(',')[1]); // Get only the Base64 part
        reader.onerror = (error) => reject(error);
    });
}

// Builds the request payload for the Gemini API
async function buildRequestBody(prompt, file) {
    const textPart = { text: prompt };
    let parts = [textPart];

    if (file) {
        if (!file.type.startsWith('image/')) {
            throw new Error('Only image files are supported.');
        }
        const base64Data = await fileToBase64(file);
        const imagePart = {
            inline_data: {
                mime_type: file.type,
                data: base64Data,
            },
        };
        parts.unshift(imagePart); // Add image before the text prompt
    }

    return { contents: [{ parts }] };
}


// --- Public API Function ---

/**
 * Sends a request to the Gemini API and returns the generated content.
 * @param {string} apiKey - The user's Gemini API key.
 * @param {string} model - The selected model name (e.g., 'gemini-2.5-pro').
 * @param {string} prompt - The text prompt.
 * @param {File} [file] - An optional image file.
 * @returns {Promise<string>} The text response from the API.
 */
export async function generateContent(apiKey, model, prompt, file) {
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
    
    try {
        const requestBody = await buildRequestBody(prompt, file);
        
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error.message || `HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        
        // Process and return the final text
        if (data.candidates && data.candidates.length > 0) {
            const candidate = data.candidates[0];
            if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                return candidate.content.parts[0].text;
            }
        } else if (data.promptFeedback) {
            return `**Request blocked.**\n\nReason: ${data.promptFeedback.blockReason}`;
        }
        
        return 'No content generated. The response was empty.';

    } catch (error) {
        console.error('Gemini API Service Error:', error);
        // Re-throw the error so the UI can catch it and display it to the user
        throw error; 
    }
}.
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\js\prompt.js ===== 
// js/prompt.js

export const SCRIPT_PROMPT_TEMPLATE = `Your Task:
You are an expert educational content creator. Your task is to generate a detailed, engaging Hinglish voiceover script for a video solution based on the provided question and its step-by-step solution.

Strict Guidelines to Follow:
The script must strictly adhere to the following structure and rules:

1.  Language: The script must be in Hinglish (a mix of Hindi and English), making it easy for students to understand. The tone should be gentle, energetic, and encouraging.

2.  Structure: The script must be divided into four distinct parts in this specific order:
    a. Opening Line: Start with "Hello Bachhon..." and read the question.
    b. Key Concept Section: Introduce the core principles using the exact phrase "**KEY CONCEPT**".
    c. Solution Walkthrough: Explain the provided step-by-step solution.
    d. Closing Line: End with the appropriate closing statement ("The Final Answer is...").

3.  LaTeX Formatting: All mathematical formulas, variables, and equations must be written in LaTeX format (e.g., $l_1=5l_2$) for proper rendering.

---
INPUTS:

1. Question:
\`\`\`
[---PASTE THE FULL QUESTION TEXT HERE---]
\`\`\`

2. Detailed Solution:
\`\`\`
[---PASTE THE DETAILED, STEP-BY-STEP SOLUTION HERE.---]
\`\`\`
---

Please generate the complete Hinglish voiceover script now based on the inputs and guidelines above.`;.
===== C:\Users\MSI\Desktop\PW\videosolution\ai-help\js\script.js ===== 
// js/script.js

import { SCRIPT_PROMPT_TEMPLATE } from './prompt.js';
import { generateContent } from './gemini-service.js';

// --- DOM Element References ---
const apiKeyInput = document.getElementById('api-key');
const modelSelect = document.getElementById('model-select');
const questionInput = document.getElementById('question-input'); // New
const solutionInput = document.getElementById('solution-input'); // New
const imageUpload = document.getElementById('image-upload');
const fileNameDisplay = document.getElementById('file-name');
const imagePreviewContainer = document.getElementById('image-preview-container');
const imagePreview = document.getElementById('image-preview');
const submitBtn = document.getElementById('submit-btn');
const responseCard = document.getElementById('response-card');
const responseContent = document.getElementById('response-content');
const loader = document.querySelector('.loader');
const btnText = document.querySelector('.btn-text');


// --- UI Functions ---

function toggleLoading(isLoading) {
    loader.classList.toggle('hidden', !isLoading);
    btnText.classList.toggle('hidden', isLoading);
    submitBtn.disabled = isLoading;
}

function displayResponse(text) {
    responseContent.innerHTML = marked.parse(text);
    if (window.MathJax) {
        MathJax.typesetPromise([responseContent]).catch((err) => console.error('MathJax Error:', err));
    }
    responseCard.classList.remove('hidden');
}

function displayError(error) {
    responseContent.innerHTML = `<p style="color: red;"><strong>Error:</strong> ${error.message}</p>`;
    responseCard.classList.remove('hidden');
}


// --- Event Handlers ---

async function handleSubmit() {
    const apiKey = apiKeyInput.value.trim();
    const model = modelSelect.value;
    const questionText = questionInput.value.trim();
    const solutionText = solutionInput.value.trim();
    const file = imageUpload.files[0];

    // --- Validation ---
    if (!apiKey) {
        alert('Please enter your Gemini API Key.');
        return;
    }
    if (!questionText || !solutionText) {
        alert('Please provide both a Question and a Solution.');
        return;
    }
    
    // --- Save API Key to Local Storage ---
    localStorage.setItem('geminiApiKey', apiKey);

    toggleLoading(true);

    try {
        // --- CONSTRUCT THE FINAL PROMPT BEHIND THE SCENES ---
        let finalPrompt = SCRIPT_PROMPT_TEMPLATE.replace('[---PASTE THE FULL QUESTION TEXT HERE---]', questionText);
        finalPrompt = finalPrompt.replace('[---PASTE THE DETAILED, STEP-BY-STEP SOLUTION HERE.---]', solutionText);

        // --- Call the API Service ---
        const resultText = await generateContent(apiKey, model, finalPrompt, file);
        displayResponse(resultText);

    } catch (error) {
        displayError(error);
    } finally {
        toggleLoading(false);
    }
}

function handleFileChange() {
    const file = imageUpload.files[0];
    if (file) {
        fileNameDisplay.textContent = file.name;
        const reader = new FileReader();
        reader.onload = (e) => {
            imagePreview.src = e.target.result;
            imagePreviewContainer.classList.remove('hidden');
        };
        reader.readAsDataURL(file);
    } else {
        fileNameDisplay.textContent = 'No file chosen';
        imagePreviewContainer.classList.add('hidden');
    }
}


// --- Initialization ---

function initialize() {
    // --- Load API Key from Local Storage ---
    const savedApiKey = localStorage.getItem('geminiApiKey');
    if (savedApiKey) {
        apiKeyInput.value = savedApiKey;
    }

    // Attach event listeners
    submitBtn.addEventListener('click', handleSubmit);
    imageUpload.addEventListener('change', handleFileChange);
}

initialize();.
